import React, { useState, useEffect } from 'react';
import { Brain, Clock, Target, Download, Wand2, RotateCcw } from 'lucide-react';
import { AnalysisResult, SummaryData, geminiService } from '../services/geminiService';
import { databaseService } from '../services/databaseService';
import { useAuth } from '../contexts/AuthContext';
import './SummaryComponent.css';

interface SummaryComponentProps {
  analysisResult: AnalysisResult | null;
  promptId?: string; // Optional prompt ID for saving/loading summaries
  loadedSummaryData?: SummaryData; // Pre-loaded summary data from history session
}

export const SummaryComponent: React.FC<SummaryComponentProps> = ({ analysisResult, promptId, loadedSummaryData }) => {
  const [generatedSummary, setGeneratedSummary] = useState<SummaryData | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuth();

  // Load existing summary if promptId is provided or loadedSummaryData is available
  useEffect(() => {
    const loadExistingSummary = async () => {
      // First check if we have pre-loaded summary data from history session
      if (loadedSummaryData) {
        setGeneratedSummary(loadedSummaryData);
        return;
      }
      
      // Otherwise, try to load from database if promptId is provided
      if (promptId && user) {
        try {
          const existingSummary = await databaseService.getSummary(user, promptId);
          if (existingSummary) {
            setGeneratedSummary(existingSummary);
          }
        } catch (error) {
          console.error('Error loading existing summary:', error);
        }
      }
    };

    loadExistingSummary();
  }, [promptId, user, loadedSummaryData]);

  const handleGenerateSummary = async () => {
    if (!analysisResult) {
      setError('No analysis data available. Please analyze content first.');
      return;
    }

    setIsGenerating(true);
    setError(null);

    try {
      const summary = await geminiService.generateSummary(analysisResult);
      setGeneratedSummary(summary);
      
      // Save to database if user is logged in and promptId is available
      if (user && promptId) {
        try {
          await databaseService.saveSummary(user, promptId, summary);
        } catch (saveError) {
          console.error('Error saving summary to database:', saveError);
          // Don't show error to user for database save failures
        }
      }
    } catch (err: any) {
      setError(err.message || 'Failed to generate summary');
      console.error('Summary generation error:', err);
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadSummary = () => {
    if (!generatedSummary) return;

    const summaryText = `
${generatedSummary.title}
${'='.repeat(generatedSummary.title.length)}

Subject: ${generatedSummary.subject}
Difficulty: ${generatedSummary.difficulty}
Study Time Estimate: ${generatedSummary.timeEstimate}

KEY TOPICS:
${generatedSummary.keyTopics.map(topic => `‚Ä¢ ${topic}`).join('\n')}

MAIN CONCEPTS:
${generatedSummary.mainConcepts.map(concept => 
  `\n${concept.topic}:\n${concept.description}\nImportance: ${concept.importance}`
).join('\n')}

STUDY GUIDE:
${generatedSummary.studyGuide.map(section => 
  `\n${section.section}:\n${section.points.map(point => `‚Ä¢ ${point}`).join('\n')}`
).join('\n')}

Generated by: ${generatedSummary.generatedBy}
Timestamp: ${new Date(generatedSummary.timestamp).toLocaleString()}
    `.trim();

    const blob = new Blob([summaryText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `study-summary-${generatedSummary.subject.replace(/\s+/g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="content-area">
      <div className="summary-container">
        {!generatedSummary ? (
          <div className="summary-prompt">
            <div className="prompt-header">
              <Target size={48} className="prompt-icon" />
              <h2>Generate Study Summary</h2>
            </div>
            
            <div className="prompt-description">
              <p>
                Transform your analyzed content into a comprehensive, detailed study summary. 
                Get organized notes with key topics, important concepts, detailed explanations, 
                and a structured study guide with learning objectives and time estimates.
              </p>
            </div>
            
            {analysisResult && (
              <div className="summary-features">
                <h3>üìù What you'll get:</h3>
                <div className="features-grid">
                  <div className="feature-item">
                    <span className="feature-icon">üéØ</span>
                    <span>Comprehensive key topics from {analysisResult.analysis.subject} with detailed explanations</span>
                  </div>
                  <div className="feature-item">
                    <span className="feature-icon">üí°</span>
                    <span>Important concepts, definitions, and real-world applications</span>
                  </div>
                  <div className="feature-item">
                    <span className="feature-icon">üìö</span>
                    <span>Organized study guide with learning objectives and time estimates</span>
                  </div>
                  <div className="feature-item">
                    <span className="feature-icon">‚ö°</span>
                    <span>Difficulty-based content organization with progress tracking</span>
                  </div>
                  <div className="feature-item">
                    <span className="feature-icon">üîç</span>
                    <span>In-depth analysis of complex topics with simplified explanations</span>
                  </div>
                  <div className="feature-item">
                    <span className="feature-icon">üìà</span>
                    <span>Learning path recommendations and skill development roadmap</span>
                  </div>
                </div>
              </div>
            )}

            <button 
              className="generate-summary-btn"
              onClick={handleGenerateSummary}
              disabled={!analysisResult || isGenerating}
            >
              {isGenerating ? (
                <>
                  <RotateCcw size={24} className="spinning" />
                  Generating Summary...
                </>
              ) : (
                <>
                  <Wand2 size={24} />
                  Generate Summary
                </>
              )}
            </button>

            {error && (
              <div className="error-message">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span>{error}</span>
              </div>
            )}

            {!analysisResult && (
              <div className="no-analysis-message">
                <Brain size={32} className="no-analysis-icon" />
                <p>Please analyze some content first using the Paper Generator tab to generate summaries.</p>
              </div>
            )}
          </div>
        ) : (
          <div className="generated-summary">
            <div className="summary-header">
              <div className="summary-title-section">
                <h2>{generatedSummary.title}</h2>
                <div className="summary-meta">
                  <span className="meta-item">
                    <Clock size={18} />
                    {generatedSummary.timeEstimate}
                  </span>
                  <span className={`difficulty-badge ${generatedSummary.difficulty.toLowerCase()}`}>
                    {generatedSummary.difficulty}
                  </span>
                </div>
              </div>
              <div className="summary-actions">
                <button 
                  className="action-btn regenerate"
                  onClick={handleGenerateSummary}
                  disabled={isGenerating}
                  title="Regenerate Summary"
                >
                  <RotateCcw size={18} />
                  Regenerate
                </button>
                <button 
                  className="action-btn download"
                  onClick={downloadSummary}
                  title="Download Summary"
                >
                  <Download size={18} />
                  Download
                </button>
              </div>
            </div>

            <div className="summary-content">
              <div className="summary-section">
                <h3>üè∑Ô∏è Key Topics</h3>
                <div className="key-topics">
                  {generatedSummary.keyTopics.map((topic, index) => (
                    <span key={index} className="topic-tag">
                      {topic}
                    </span>
                  ))}
                </div>
              </div>

              <div className="summary-section">
                <h3>üí° Main Concepts</h3>
                <div className="main-concepts">
                  {generatedSummary.mainConcepts.map((concept, index) => (
                    <div key={index} className="concept-card">
                      <h4>{concept.topic}</h4>
                      <p className="concept-description">{concept.description}</p>
                      <div className="concept-importance">
                        <span className="importance-label">Why it's important:</span>
                        <span className="importance-text">{concept.importance}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="summary-section">
                <h3>üìö Study Guide</h3>
                <div className="study-guide">
                  {generatedSummary.studyGuide.map((section, index) => (
                    <div key={index} className="guide-section">
                      <h4>{section.section}</h4>
                      <ul className="guide-points">
                        {section.points.map((point, pointIndex) => (
                          <li key={pointIndex}>{point}</li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </div>
              </div>

              <div className="summary-footer">
                <div className="generation-info">
                  <span>Generated by {generatedSummary.generatedBy}</span>
                  <span className="separator">‚Ä¢</span>
                  <span>{new Date(generatedSummary.timestamp).toLocaleString()}</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};