import React, { useState, useCallback } from 'react';
import {
  Container,
  Typography,
  Box,
  Grid,
  Card,
  CardContent,
  Alert,
  Button,
  Chip,
} from '@mui/material';
import { ChatInterface, ChatHistory, Message, ChatSession } from '../components/chat';

// Mock chat sessions for demo
const mockSessions: ChatSession[] = [
  {
    id: 'session-1',
    title: 'Machine Learning Basics',
    messages: [
      {
        id: '1',
        content: 'Can you explain what machine learning is?',
        sender: 'user',
        timestamp: new Date('2024-01-01T10:00:00Z'),
        type: 'text',
      },
      {
        id: '2',
        content: 'Machine learning is a subset of artificial intelligence (AI) that enables computers to learn and make decisions from data without being explicitly programmed for every task.',
        sender: 'assistant',
        timestamp: new Date('2024-01-01T10:01:00Z'),
        type: 'text',
        metadata: {
          confidence: 0.95,
          relatedConcepts: ['AI', 'Data Science', 'Algorithms'],
          sources: ['Video: Introduction to ML'],
        },
        reactions: {
          thumbsUp: 1,
          thumbsDown: 0,
          userReaction: 'up',
        },
      },
    ],
    createdAt: new Date('2024-01-01T10:00:00Z'),
    updatedAt: new Date('2024-01-01T10:01:00Z'),
    context: {
      videoId: 'video-123',
      videoTitle: 'Introduction to Machine Learning',
      topic: 'Machine Learning',
    },
  },
  {
    id: 'session-2',
    title: 'Neural Networks Deep Dive',
    messages: [
      {
        id: '3',
        content: 'How do neural networks work?',
        sender: 'user',
        timestamp: new Date('2024-01-02T14:00:00Z'),
        type: 'text',
      },
      {
        id: '4',
        content: 'Neural networks are computing systems inspired by biological neural networks. Here\'s a simple example:\n\n```python\nimport numpy as np\n\nclass SimpleNeuron:\n    def __init__(self, weights, bias):\n        self.weights = weights\n        self.bias = bias\n    \n    def forward(self, inputs):\n        return np.dot(inputs, self.weights) + self.bias\n```',
        sender: 'assistant',
        timestamp: new Date('2024-01-02T14:01:00Z'),
        type: 'text',
        metadata: {
          confidence: 0.92,
          relatedConcepts: ['Deep Learning', 'Perceptron', 'Backpropagation'],
          sources: ['Video: Neural Networks Explained'],
        },
      },
    ],
    createdAt: new Date('2024-01-02T14:00:00Z'),
    updatedAt: new Date('2024-01-02T14:01:00Z'),
    context: {
      videoId: 'video-456',
      videoTitle: 'Neural Networks Explained',
      topic: 'Neural Networks',
    },
  },
];

export const ChatDemoPage: React.FC = () => {
  const [currentSession, setCurrentSession] = useState<ChatSession>(mockSessions[0]);
  const [sessions, setSessions] = useState<ChatSession[]>(mockSessions);
  const [isTyping, setIsTyping] = useState(false);

  const handleSendMessage = useCallback(async (content: string) => {
    // Add user message
    const userMessage: Message = {
      id: `msg-${Date.now()}`,
      content,
      sender: 'user',
      timestamp: new Date(),
      type: 'text',
    };

    const updatedSession = {
      ...currentSession,
      messages: [...currentSession.messages, userMessage],
      updatedAt: new Date(),
    };

    setCurrentSession(updatedSession);
    setSessions(prev => prev.map(s => s.id === currentSession.id ? updatedSession : s));

    // Simulate AI response
    setIsTyping(true);
    
    setTimeout(() => {
      const aiMessage: Message = {
        id: `msg-${Date.now() + 1}`,
        content: `Thank you for your question about "${content}". This is a simulated AI response that would normally be generated by the AI tutor service based on the video content and context.`,
        sender: 'assistant',
        timestamp: new Date(),
        type: 'text',
        metadata: {
          confidence: 0.88,
          relatedConcepts: ['Demo', 'Simulation'],
          sources: ['Demo Context'],
        },
      };

      const finalSession = {
        ...updatedSession,
        messages: [...updatedSession.messages, aiMessage],
        updatedAt: new Date(),
      };

      setCurrentSession(finalSession);
      setSessions(prev => prev.map(s => s.id === currentSession.id ? finalSession : s));
      setIsTyping(false);
    }, 2000);
  }, [currentSession]);

  const handleMessageReaction = useCallback((messageId: string, reaction: 'up' | 'down') => {
    const updatedSession = {
      ...currentSession,
      messages: currentSession.messages.map(msg => {
        if (msg.id === messageId) {
          const currentReaction = msg.reactions?.userReaction;
          const newReaction = currentReaction === reaction ? null : reaction;
          
          return {
            ...msg,
            reactions: {
              thumbsUp: msg.reactions?.thumbsUp || 0,
              thumbsDown: msg.reactions?.thumbsDown || 0,
              userReaction: newReaction,
            },
          };
        }
        return msg;
      }),
    };

    setCurrentSession(updatedSession);
    setSessions(prev => prev.map(s => s.id === currentSession.id ? updatedSession : s));
  }, [currentSession]);

  const handleSearchMessages = useCallback((query: string) => {
    return currentSession.messages.filter(msg =>
      msg.content.toLowerCase().includes(query.toLowerCase())
    );
  }, [currentSession]);

  const handleExportChat = useCallback(() => {
    console.log('Exporting chat:', currentSession.title);
  }, [currentSession]);

  const handleClearChat = useCallback(() => {
    const clearedSession = {
      ...currentSession,
      messages: [],
      updatedAt: new Date(),
    };
    
    setCurrentSession(clearedSession);
    setSessions(prev => prev.map(s => s.id === currentSession.id ? clearedSession : s));
  }, [currentSession]);

  const handleSessionSelect = useCallback((session: ChatSession) => {
    setCurrentSession(session);
  }, []);

  const handleSessionDelete = useCallback((sessionId: string) => {
    setSessions(prev => prev.filter(s => s.id !== sessionId));
    
    // If deleted session was current, switch to first available
    if (currentSession.id === sessionId && sessions.length > 1) {
      const remainingSessions = sessions.filter(s => s.id !== sessionId);
      setCurrentSession(remainingSessions[0]);
    }
  }, [currentSession, sessions]);

  const handleSessionRename = useCallback((sessionId: string, newTitle: string) => {
    setSessions(prev => prev.map(s => 
      s.id === sessionId ? { ...s, title: newTitle } : s
    ));
    
    if (currentSession.id === sessionId) {
      setCurrentSession(prev => ({ ...prev, title: newTitle }));
    }
  }, [currentSession]);

  return (
    <Container maxWidth="xl" sx={{ py: 4 }}>
      <Typography variant="h3" component="h1" gutterBottom>
        AI Tutor Chat Demo
      </Typography>
      
      <Typography variant="h6" color="text.secondary" paragraph>
        Experience the interactive AI tutor chat system with real-time messaging,
        code syntax highlighting, and conversation management.
      </Typography>
      
      <Alert severity="info" sx={{ mb: 3 }}>
        This is a demonstration of the Chat Interface component. 
        AI responses are simulated for demo purposes. In the real application,
        responses would be generated by the AI tutor service.
      </Alert>

      <Grid container spacing={3} sx={{ height: '80vh' }}>
        {/* Chat History Sidebar */}
        <Grid item xs={12} md={4}>
          <Card sx={{ height: '100%' }}>
            <ChatHistory
              sessions={sessions}
              currentSessionId={currentSession.id}
              onSessionSelect={handleSessionSelect}
              onSessionDelete={handleSessionDelete}
              onSessionRename={handleSessionRename}
              showSearch={true}
              showFilters={true}
            />
          </Card>
        </Grid>

        {/* Main Chat Interface */}
        <Grid item xs={12} md={8}>
          <ChatInterface
            session={currentSession}
            onSendMessage={handleSendMessage}
            onMessageReaction={handleMessageReaction}
            onExportChat={handleExportChat}
            onClearChat={handleClearChat}
            onSearchMessages={handleSearchMessages}
            isTyping={isTyping}
            showHistory={true}
            showExport={true}
            maxHeight={600}
          />
        </Grid>
      </Grid>

      {/* Feature Highlights */}
      <Box sx={{ mt: 4 }}>
        <Typography variant="h6" gutterBottom>
          Try These Features:
        </Typography>
        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
          <Chip label="💬 Send messages" size="small" />
          <Chip label="👍 React to responses" size="small" />
          <Chip label="🔍 Search conversations" size="small" />
          <Chip label="📤 Export chat history" size="small" />
          <Chip label="🏷️ View message metadata" size="small" />
          <Chip label="💻 Code syntax highlighting" size="small" />
          <Chip label="📚 Context-aware responses" size="small" />
          <Chip label="⭐ Star conversations" size="small" />
        </Box>
      </Box>
    </Container>
  );
};